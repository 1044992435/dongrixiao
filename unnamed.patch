Index: src/main/java/com/jk/model/CartItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/model/CartItem.java	(date 1540896170000)
+++ src/main/java/com/jk/model/CartItem.java	(date 1540896170000)
@@ -0,0 +1,38 @@
+package com.jk.model;
+
+/**
+ * <pre>com.jk.model
+ * 类名称：CartItem
+ * 类描述：购物项对象
+ * 创建人：王震
+ * 创建时间：2018/10/30  18:31
+ * 修改人：王震
+ * 修改时间：2018/10/30  18:31
+ * 修改备注：
+ * @version </pre>
+ */
+public class CartItem {
+    private Product product;	// 购物项中商品信息
+    private int count;			// 购买某种商品数量
+    private double subtotal;	// 购买某种商品小计
+    public Product getProduct() {
+        return product;
+    }
+    public void setProduct(Product product) {
+        this.product = product;
+    }
+    public int getCount() {
+        return count;
+    }
+    public void setCount(int count) {
+        this.count = count;
+    }
+    // 小计自动计算的.
+    public double getSubtotal() {
+        return count * product.getShop_price();
+    }
+	/*public void setSubtotal(double subtotal) {
+		this.subtotal = subtotal;
+	}
+	*/
+}
Index: src/main/java/com/jk/model/Cart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/model/Cart.java	(date 1540896156000)
+++ src/main/java/com/jk/model/Cart.java	(date 1540896156000)
@@ -0,0 +1,76 @@
+package com.jk.model;
+
+import java.util.Collection;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+/**
+ * <pre>com.jk.model
+ * 类名称：Cart
+ * 类描述：购物车对象
+ * 创建人：王震
+ * 创建时间：2018/10/30  18:33
+ * 修改人：王震
+ * 修改时间：2018/10/30  18:33
+ * 修改备注：
+ * @version </pre>
+ */
+public class Cart {
+    // 购物项集合:Map的key就是商品pid,value:购物项
+    private Map<Integer, CartItem> map = new LinkedHashMap<Integer, CartItem>();
+
+    // Cart对象中有一个叫cartItems属性.
+    public Collection<CartItem> getCartItems(){
+        return map.values();
+    }
+
+    // 购物总计:
+    private double total;
+
+    public double getTotal() {
+        return total;
+    }
+
+    // 购物车的功能:
+    // 1.将购物项添加到购物车
+    public void addCart(CartItem cartItem) {
+        // 判断购物车中是否已经存在该购物项:
+        /*
+         *  * 如果存在:
+         *  	* 数量增加
+         *  	* 总计 = 总计 + 购物项小计
+         *  * 如果不存在:
+         *  	* 向map中添加购物项
+         *  	* 总计 = 总计 + 购物项小计
+         */
+        // 获得商品id.
+        Integer pid = cartItem.getProduct().getPid();
+        // 判断购物车中是否已经存在该购物项:
+        if(map.containsKey(pid)){
+            // 存在
+            CartItem _cartItem = map.get(pid);// 获得购物车中原来的购物项
+            _cartItem.setCount(_cartItem.getCount()+cartItem.getCount());
+        }else{
+            // 不存在
+            map.put(pid, cartItem);
+        }
+        // 设置总计的值
+        total += cartItem.getSubtotal();
+    }
+
+    // 2.从购物车移除购物项
+    public void removeCart(Integer pid) {
+        // 将购物项移除购物车:
+        CartItem cartItem = map.remove(pid);
+        // 总计 = 总计 -移除的购物项小计:
+        total -= cartItem.getSubtotal();
+    }
+
+    // 3.清空购物车
+    public void clearCart() {
+        // 将所有购物项清空
+        map.clear();
+        // 将总计设置为0
+        total = 0;
+    }
+}
Index: src/main/java/com/jk/model/AdminUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/model/AdminUser.java	(date 1540896099000)
+++ src/main/java/com/jk/model/AdminUser.java	(date 1540896099000)
@@ -0,0 +1,37 @@
+package com.jk.model;
+
+
+/**
+ * <pre>com.jk.model
+ * 类名称：AdminUser
+ * 类描述：后台登录实体类
+ * 创建人：王震
+ * 创建时间：2018/10/30  17:27
+ * 修改人：王震
+ * 修改时间：2018/10/30  17:27
+ * 修改备注：
+ * @version </pre>
+ */
+public class AdminUser {
+    private Integer uid;
+    private String username;
+    private String password;
+    public Integer getUid() {
+        return uid;
+    }
+    public void setUid(Integer uid) {
+        this.uid = uid;
+    }
+    public String getUsername() {
+        return username;
+    }
+    public void setUsername(String username) {
+        this.username = username;
+    }
+    public String getPassword() {
+        return password;
+    }
+    public void setPassword(String password) {
+        this.password = password;
+    }
+}
Index: src/main/java/com/jk/model/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/model/Order.java	(date 1540896287000)
+++ src/main/java/com/jk/model/Order.java	(date 1540896287000)
@@ -0,0 +1,85 @@
+package com.jk.model;
+
+import java.util.Date;
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * <pre>com.jk.model
+ * 类名称：Order
+ * 类描述：订单实体
+ * 创建人：王震
+ * 创建时间：2018/10/30  18:37
+ * 修改人：王震
+ * 修改时间：2018/10/30  18:37
+ * 修改备注：
+ * @version </pre>
+ */
+public class Order {
+    private Integer oid;
+    private Double total;
+    private Date ordertime;
+    private Integer state;// 1:未付款   2:订单已经付款   3:已经发货   4:订单结束
+    private String name;
+    private String phone;
+    private String addr;
+    // 用户的外键:对象
+    private User user;
+    // 配置订单项的集合
+    private Set<OrderItem> orderItems = new HashSet<OrderItem>();
+
+    public Integer getOid() {
+        return oid;
+    }
+    public void setOid(Integer oid) {
+        this.oid = oid;
+    }
+    public Double getTotal() {
+        return total;
+    }
+    public void setTotal(Double total) {
+        this.total = total;
+    }
+    public Date getOrdertime() {
+        return ordertime;
+    }
+    public void setOrdertime(Date ordertime) {
+        this.ordertime = ordertime;
+    }
+    public Integer getState() {
+        return state;
+    }
+    public void setState(Integer state) {
+        this.state = state;
+    }
+    public String getName() {
+        return name;
+    }
+    public void setName(String name) {
+        this.name = name;
+    }
+    public String getPhone() {
+        return phone;
+    }
+    public void setPhone(String phone) {
+        this.phone = phone;
+    }
+    public String getAddr() {
+        return addr;
+    }
+    public void setAddr(String addr) {
+        this.addr = addr;
+    }
+    public User getUser() {
+        return user;
+    }
+    public void setUser(User user) {
+        this.user = user;
+    }
+    public Set<OrderItem> getOrderItems() {
+        return orderItems;
+    }
+    public void setOrderItems(Set<OrderItem> orderItems) {
+        this.orderItems = orderItems;
+    }
+}
Index: src/main/java/com/jk/model/OrderItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/model/OrderItem.java	(date 1540896271000)
+++ src/main/java/com/jk/model/OrderItem.java	(date 1540896271000)
@@ -0,0 +1,53 @@
+package com.jk.model;
+
+/**
+ * <pre>com.jk.model
+ * 类名称：OrderItem
+ * 类描述：订单项的实体
+ * 创建人：王震
+ * 创建时间：2018/10/30  18:36
+ * 修改人：王震
+ * 修改时间：2018/10/30  18:36
+ * 修改备注：
+ * @version </pre>
+ */
+public class OrderItem {
+
+    private Integer itemid;
+    private Integer count;
+    private Double subtotal;
+    // 商品外键:对象
+    private Product product;
+    // 订单外键:对象
+    private Order order;
+    public Integer getItemid() {
+        return itemid;
+    }
+    public void setItemid(Integer itemid) {
+        this.itemid = itemid;
+    }
+    public Integer getCount() {
+        return count;
+    }
+    public void setCount(Integer count) {
+        this.count = count;
+    }
+    public Double getSubtotal() {
+        return subtotal;
+    }
+    public void setSubtotal(Double subtotal) {
+        this.subtotal = subtotal;
+    }
+    public Product getProduct() {
+        return product;
+    }
+    public void setProduct(Product product) {
+        this.product = product;
+    }
+    public Order getOrder() {
+        return order;
+    }
+    public void setOrder(Order order) {
+        this.order = order;
+    }
+}
Index: src/main/java/com/jk/model/CategorySecond.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/model/CategorySecond.java	(date 1540896231000)
+++ src/main/java/com/jk/model/CategorySecond.java	(date 1540896231000)
@@ -0,0 +1,48 @@
+package com.jk.model;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * <pre>com.jk.model
+ * 类名称：CategorySecond
+ * 类描述：二级分类的实体
+ * 创建人：王震
+ * 创建时间：2018/10/30  18:35
+ * 修改人：王震
+ * 修改时间：2018/10/30  18:35
+ * 修改备注：
+ * @version </pre>
+ */
+public class CategorySecond {
+    private Integer csid;
+    private String csname;
+    // 所属一级分类.存的是一级分类的对象.
+    private Category category;
+    // 配置商品集合
+    private Set<Product> products = new HashSet<Product>();
+    public Integer getCsid() {
+        return csid;
+    }
+    public void setCsid(Integer csid) {
+        this.csid = csid;
+    }
+    public String getCsname() {
+        return csname;
+    }
+    public void setCsname(String csname) {
+        this.csname = csname;
+    }
+    public Category getCategory() {
+        return category;
+    }
+    public void setCategory(Category category) {
+        this.category = category;
+    }
+    public Set<Product> getProducts() {
+        return products;
+    }
+    public void setProducts(Set<Product> products) {
+        this.products = products;
+    }
+}
Index: src/main/java/com/jk/model/Category.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/model/Category.java	(date 1540896204000)
+++ src/main/java/com/jk/model/Category.java	(date 1540896204000)
@@ -0,0 +1,41 @@
+package com.jk.model;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * <pre>com.jk.model
+ * 类名称：Category
+ * 类描述：一级分类的实体类对象
+ * 创建人：王震
+ * 创建时间：2018/10/30  18:34
+ * 修改人：王震
+ * 修改时间：2018/10/30  18:34
+ * 修改备注：
+ * @version </pre>
+ */
+public class Category {
+    private Integer cid;
+    private String cname;
+    // 一级分类中存放二级分类的集合:
+    private Set<CategorySecond> categorySeconds = new HashSet<CategorySecond>();
+
+    public Integer getCid() {
+        return cid;
+    }
+    public void setCid(Integer cid) {
+        this.cid = cid;
+    }
+    public String getCname() {
+        return cname;
+    }
+    public void setCname(String cname) {
+        this.cname = cname;
+    }
+    public Set<CategorySecond> getCategorySeconds() {
+        return categorySeconds;
+    }
+    public void setCategorySeconds(Set<CategorySecond> categorySeconds) {
+        this.categorySeconds = categorySeconds;
+    }
+}
Index: src/main/java/com/jk/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/model/User.java	(date 1540896331000)
+++ src/main/java/com/jk/model/User.java	(date 1540896331000)
@@ -0,0 +1,89 @@
+package com.jk.model;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * <pre>com.jk.model
+ * 类名称：User
+ * 类描述：用户名模块实体类
+ * 创建人：王震
+ * 创建时间：2018/10/30  18:39
+ * 修改人：王震
+ * 修改时间：2018/10/30  18:39
+ * 修改备注：
+ * @version </pre>
+ */
+public class User {
+    private Integer uid;
+    private String username;
+    private String password;
+    private String name;
+    private String email;
+    private String phone;
+    private String addr;
+    private Integer state;
+    private String code;
+    // 一个用户对应多个订单:
+    private Set<Order> orders = new HashSet<Order>();
+    public Integer getUid() {
+        return uid;
+    }
+    public void setUid(Integer uid) {
+        this.uid = uid;
+    }
+    public String getUsername() {
+        return username;
+    }
+    public void setUsername(String username) {
+        this.username = username;
+    }
+    public String getPassword() {
+        return password;
+    }
+    public void setPassword(String password) {
+        this.password = password;
+    }
+    public String getName() {
+        return name;
+    }
+    public void setName(String name) {
+        this.name = name;
+    }
+    public String getEmail() {
+        return email;
+    }
+    public void setEmail(String email) {
+        this.email = email;
+    }
+    public String getPhone() {
+        return phone;
+    }
+    public void setPhone(String phone) {
+        this.phone = phone;
+    }
+    public String getAddr() {
+        return addr;
+    }
+    public void setAddr(String addr) {
+        this.addr = addr;
+    }
+    public Integer getState() {
+        return state;
+    }
+    public void setState(Integer state) {
+        this.state = state;
+    }
+    public String getCode() {
+        return code;
+    }
+    public void setCode(String code) {
+        this.code = code;
+    }
+    public Set<Order> getOrders() {
+        return orders;
+    }
+    public void setOrders(Set<Order> orders) {
+        this.orders = orders;
+    }
+}
Index: src/main/java/com/jk/model/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/model/Product.java	(date 1540896307000)
+++ src/main/java/com/jk/model/Product.java	(date 1540896307000)
@@ -0,0 +1,82 @@
+package com.jk.model;
+
+import java.util.Date;
+
+/**
+ * <pre>com.jk.model
+ * 类名称：Product
+ * 类描述：商品的实体对象
+ * 创建人：王震
+ * 创建时间：2018/10/30  18:38
+ * 修改人：王震
+ * 修改时间：2018/10/30  18:38
+ * 修改备注：
+ * @version </pre>
+ */
+public class Product {
+
+    private Integer pid;
+    private String pname;
+    private Double market_price;
+    private Double shop_price;
+    private String image;
+    private String pdesc;
+    private Integer is_hot;
+    private Date pdate;
+    // 二级分类的外键:使用二级分类的对象.
+    private CategorySecond categorySecond;
+    public Integer getPid() {
+        return pid;
+    }
+    public void setPid(Integer pid) {
+        this.pid = pid;
+    }
+    public String getPname() {
+        return pname;
+    }
+    public void setPname(String pname) {
+        this.pname = pname;
+    }
+    public Double getMarket_price() {
+        return market_price;
+    }
+    public void setMarket_price(Double market_price) {
+        this.market_price = market_price;
+    }
+    public Double getShop_price() {
+        return shop_price;
+    }
+    public void setShop_price(Double shop_price) {
+        this.shop_price = shop_price;
+    }
+    public String getImage() {
+        return image;
+    }
+    public void setImage(String image) {
+        this.image = image;
+    }
+    public String getPdesc() {
+        return pdesc;
+    }
+    public void setPdesc(String pdesc) {
+        this.pdesc = pdesc;
+    }
+    public Integer getIs_hot() {
+        return is_hot;
+    }
+    public void setIs_hot(Integer is_hot) {
+        this.is_hot = is_hot;
+    }
+    public Date getPdate() {
+        return pdate;
+    }
+    public void setPdate(Date pdate) {
+        this.pdate = pdate;
+    }
+    public CategorySecond getCategorySecond() {
+        return categorySecond;
+    }
+    public void setCategorySecond(CategorySecond categorySecond) {
+        this.categorySecond = categorySecond;
+    }
+}
Index: src/main/java/com/jk/aop/DataSourceAdvice.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/aop/DataSourceAdvice.java	(date 1540192482000)
+++ src/main/java/com/jk/aop/DataSourceAdvice.java	(date 1540192482000)
@@ -0,0 +1,52 @@
+package com.jk.aop;
+
+import java.lang.reflect.Method;
+
+import org.springframework.aop.AfterReturningAdvice;
+import org.springframework.aop.MethodBeforeAdvice;
+import org.springframework.aop.ThrowsAdvice;
+
+public class DataSourceAdvice implements MethodBeforeAdvice, AfterReturningAdvice, ThrowsAdvice{
+
+	// service方法执行之前被调用  
+    public void before(Method method, Object[] args, Object target) throws Throwable {  
+        System.out.println("切入点: " + target.getClass().getName() + "类中" + method.getName() + "方法");  
+        if(method.getName().startsWith("add")   
+            || method.getName().startsWith("create")  
+            || method.getName().startsWith("save")  
+            || method.getName().startsWith("edit")  
+            || method.getName().startsWith("update")  
+            || method.getName().startsWith("delete")  
+            || method.getName().startsWith("remove")){  
+            System.out.println("切换到: master");  
+            DataSourceSwitcher.setMaster();  
+        }  
+        else  {  
+        	
+        	 if(method.getName().startsWith("userQuery")  
+        	           ){  
+        	            System.out.println("切换到: slave");  
+        	            DataSourceSwitcher.setSlaveall("slave");   
+        	        } 
+        	 
+        	 
+        	 if( method.getName().startsWith("find2")  
+     	            ){  
+     	            System.out.println("切换到: slave");  
+     	           DataSourceSwitcher.setSlaveall("IP衣服:181283132");  
+     	     }
+        	 DataSourceSwitcher.setSlaveall("slave");  
+        }  
+    }  
+  
+    // service方法执行完之后被调用  
+    public void afterReturning(Object arg0, Method method, Object[] args, Object target) throws Throwable {  
+    }  
+  
+    // 抛出Exception之后被调用  
+    public void afterThrowing(Method method, Object[] args, Object target, Exception ex) throws Throwable {  
+        DataSourceSwitcher.setSlave();  
+        System.out.println("出现异常,切换到: slave");  
+    }  
+
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(date 1540890786000)
+++ .gitignore	(date 1540890786000)
@@ -0,0 +1,25 @@
+/target/
+!.mvn/wrapper/maven-wrapper.jar
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### NetBeans ###
+/nbproject/private/
+/build/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
\ No newline at end of file
Index: src/main/webapp/WEB-INF/web.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/WEB-INF/web.xml	(date 1540890941000)
+++ src/main/webapp/WEB-INF/web.xml	(date 1540890941000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
+         version="4.0">
+</web-app>
\ No newline at end of file
Index: src/main/java/com/jk/aop/DataSourceSwitcher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/aop/DataSourceSwitcher.java	(date 1540192482000)
+++ src/main/java/com/jk/aop/DataSourceSwitcher.java	(date 1540192482000)
@@ -0,0 +1,37 @@
+package com.jk.aop;
+
+import org.springframework.util.Assert;
+
+public class DataSourceSwitcher {
+	@SuppressWarnings("rawtypes")  
+    private static final ThreadLocal contextHolder = new ThreadLocal();  
+  
+    @SuppressWarnings("unchecked")  
+    public static void setDataSource(String dataSource) {  
+        Assert.notNull(dataSource, "dataSource cannot be null");  
+        contextHolder.set(dataSource);  
+    }  
+  
+    public static void setMaster(){  
+        clearDataSource();  
+    }  
+      
+    public static void setSlave() {  
+        setDataSource("slave");  
+    }    
+    
+    public static void setSlaveall(String key) {  
+        setDataSource(key);  
+    }  
+    
+    
+    
+      
+    public static String getDataSource() {  
+        return (String) contextHolder.get();  
+    }  
+  
+    public static void clearDataSource() {  
+        contextHolder.remove();  
+    }  
+}
Index: src/main/java/com/jk/aop/DynamicDataSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/aop/DynamicDataSource.java	(date 1540192482000)
+++ src/main/java/com/jk/aop/DynamicDataSource.java	(date 1540192482000)
@@ -0,0 +1,12 @@
+package com.jk.aop;
+
+import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;
+
+public class DynamicDataSource extends AbstractRoutingDataSource{
+
+	@Override
+	protected Object determineCurrentLookupKey() {
+		return DataSourceSwitcher.getDataSource();  
+	}
+
+}
Index: src/test/java/com/jk/TrioShopServerApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/com/jk/TrioShopServerApplicationTests.java	(date 1540890791000)
+++ src/test/java/com/jk/TrioShopServerApplicationTests.java	(date 1540890791000)
@@ -0,0 +1,16 @@
+package com.jk;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringRunner;
+
+@RunWith(SpringRunner.class)
+@SpringBootTest
+public class TrioShopServerApplicationTests {
+
+    @Test
+    public void contextLoads() {
+    }
+
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(date 1540891039000)
+++ pom.xml	(date 1540891039000)
@@ -0,0 +1,164 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>com.jk</groupId>
+    <artifactId>trio_shop_server</artifactId>
+    <version>0.0.1-SNAPSHOT</version>
+    <packaging>jar</packaging>
+
+    <name>trio_shop_server</name>
+    <description>Demo project for Spring Boot</description>
+
+    <parent>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-starter-parent</artifactId>
+        <version>2.0.6.RELEASE</version>
+        <relativePath/> <!-- lookup parent from repository -->
+    </parent>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
+        <java.version>1.8</java.version>
+    </properties>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-web</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+
+        <dependency>
+            <groupId>com.alibaba</groupId>
+            <artifactId>fastjson</artifactId>
+            <version>1.2.15</version>
+        </dependency>
+
+        <!-- servlet 依赖. -->
+        <dependency>
+            <groupId>javax.servlet</groupId>
+            <artifactId>javax.servlet-api</artifactId>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>javax.servlet</groupId>
+            <artifactId>jstl</artifactId>
+        </dependency>
+
+        <!-- 添加springboot对amqp的支持 -->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-amqp</artifactId>
+        </dependency>
+
+        <!--Aop-->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-aop</artifactId>
+        </dependency>
+
+
+        <!--mongodb-->
+        <dependency>
+            <groupId>org.mongodb</groupId>
+            <artifactId>mongo-java-driver</artifactId>
+            <version>3.2.2</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-data-mongodb</artifactId>
+        </dependency>
+
+        <!-- MYSQL -->
+        <dependency>
+            <groupId>mysql</groupId>
+            <artifactId>mysql-connector-java</artifactId>
+        </dependency>
+
+
+        <!--mybatis-->
+        <dependency>
+            <groupId>org.mybatis.spring.boot</groupId>
+            <artifactId>mybatis-spring-boot-starter</artifactId>
+            <version>1.1.1</version>
+        </dependency>
+
+
+        <!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis -->
+        <dependency>
+            <groupId>org.springframework.data</groupId>
+            <artifactId>spring-data-redis</artifactId>
+            <version>2.1.1.RELEASE</version>
+        </dependency>
+
+        <!-- https://mvnrepository.com/artifact/redis.clients/jedis -->
+        <dependency>
+            <groupId>redis.clients</groupId>
+            <artifactId>jedis</artifactId>
+            <version>2.9.0</version>
+        </dependency>
+
+
+        <!--dubbo zookeeper-->
+        <dependency>
+            <groupId>com.alibaba</groupId>
+            <artifactId>dubbo</artifactId>
+            <version>2.5.3</version>
+            <exclusions>
+                <exclusion>
+                    <artifactId>spring</artifactId>
+                    <groupId>org.springframework</groupId>
+                </exclusion>
+            </exclusions>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.zookeeper</groupId>
+            <artifactId>zookeeper</artifactId>
+            <version>3.3.6</version>
+            <exclusions>
+                <exclusion>
+                    <groupId>log4j</groupId>
+                    <artifactId>log4j</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
+        <dependency>
+            <groupId>log4j</groupId>
+            <artifactId>log4j</artifactId>
+            <version>1.2.16</version>
+        </dependency>
+        <dependency>
+            <groupId>com.github.sgroschupf</groupId>
+            <artifactId>zkclient</artifactId>
+            <version>0.1</version>
+        </dependency>
+
+    </dependencies>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.springframework.boot</groupId>
+                <artifactId>spring-boot-maven-plugin</artifactId>
+            </plugin>
+        </plugins>
+        <resources>
+            <resource>
+                <directory>src/main/java</directory>
+                <includes>
+                    <include>**/*.xml</include>
+                </includes>
+            </resource>
+        </resources>
+    </build>
+
+</project>
Index: src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/application.yml	(date 1540891112000)
+++ src/main/resources/application.yml	(date 1540891112000)
@@ -0,0 +1,42 @@
+server:
+  port: 8082
+  servlet:
+    context-path: /trio_shop_server
+spring:
+  mvc:
+    view:
+      prefix: /
+      suffix: .jsp
+  datasource:
+    username: root
+    password: root
+    url: jdbc:mysql://localhost:3306/shop?useUnicode=true&characterEncoding=UTF-8
+    driver-class-name: com.mysql.jdbc.Driver
+  jpa:
+    show-sql: true
+    hibernate:
+      ddl-auto: update
+  redis:
+    host: 127.0.0.1
+    port: 6380
+    jedis:
+      pool:
+        max-idle: 8
+        min-idle: 0
+  rabbitmq:
+    host: 127.0.0.1
+    password: guest
+    username: guest
+    port: 5672
+  data:
+    mongodb:
+      host: 192.168.241.129
+      port: 27017
+      database: 1804B
+  aop:
+    auto: true
+
+mybatis:
+  mapper-locations: classpath:xml/*.xml
+  type-aliases-package: com.jk.model
+
Index: src/main/resources/dubbo-provider.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/dubbo-provider.xml	(date 1540870879000)
+++ src/main/resources/dubbo-provider.xml	(date 1540870879000)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+    http://www.springframework.org/schema/beans/spring-beans.xsd
+    http://code.alibabatech.com/schema/dubbo
+    http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
+    <!-- 提供方应用信息，用于计算依赖关系 -->
+    <dubbo:application name="dubbo-service" />
+    <!-- 使用multicast广播注册中心暴露服务地址 -->
+    <!-- <dubbo:registry address="multicast://224.5.6.7:1234" /> -->
+    <!-- 使用zookeeper注册中心暴露服务地址 -->
+    <dubbo:registry address="zookeeper://192.168.241.1:2181" />
+    <!-- 用dubbo协议在20880端口暴露服务 -->
+    <dubbo:protocol name="dubbo" port="20880" />
+    <!-- Bean 聲明  和本地bean一样实现服务 -->
+    <bean id="userService" class="com.jk.service.UserServiceImpl" />
+    <!-- 声明需要暴露的服务接口 -->
+    <dubbo:service interface="com.jk.service.UserService"  ref="userService" />
+</beans>
\ No newline at end of file
Index: src/main/java/com/jk/TrioShopServerApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/jk/TrioShopServerApplication.java	(date 1540891247000)
+++ src/main/java/com/jk/TrioShopServerApplication.java	(date 1540891247000)
@@ -0,0 +1,32 @@
+package com.jk;
+
+import com.alibaba.fastjson.serializer.SerializerFeature;
+import com.alibaba.fastjson.support.config.FastJsonConfig;
+import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;
+import org.mybatis.spring.annotation.MapperScan;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ImportResource;
+import org.springframework.http.converter.HttpMessageConverter;
+
+@SpringBootApplication
+@MapperScan("com.jk.mapper")
+@ImportResource(value = {"classpath:dubbo-provider.xml"})
+public class TrioShopServerApplication {
+
+    public static void main(String[] args) {
+        SpringApplication.run(TrioShopServerApplication.class, args);
+    }
+
+    @Bean
+    public HttpMessageConverters fastJsonHttpMessageConverters() {
+        FastJsonHttpMessageConverter fastConverter = new  FastJsonHttpMessageConverter();
+        FastJsonConfig fastJsonConfig = new FastJsonConfig();
+        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);
+        fastConverter.setFastJsonConfig(fastJsonConfig);
+        HttpMessageConverter<?> converter = fastConverter;
+        return new HttpMessageConverters(converter);
+    }
+}
